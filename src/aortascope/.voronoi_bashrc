# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

source_append() {
    # Source the workspace setup.bash
    if [ -f "$1/devel/setup.bash" ]; then
        source "$1/devel/setup.bash"
    elif [ -f "$1/install/setup.bash" ]; then
        source "$1/install/setup.bash"
    else
        echo "No setup.bash found in $1"
        return
    fi

    # Append ROS_PACKAGE_PATH, CMAKE_PREFIX_PATH, LD_LIBRARY_PATH, and PYTHONPATH
    export ROS_PACKAGE_PATH=$(echo $ROS_PACKAGE_PATH:$1/src | tr -s ':')
    export CMAKE_PREFIX_PATH=$(echo $CMAKE_PREFIX_PATH:$1/devel | tr -s ':')
    export LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH:$1/devel/lib | tr -s ':')
    export PYTHONPATH=$(echo $PYTHONPATH:$1/devel/lib/python3/dist-packages | tr -s ':')
}

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export PATH=/usr/local/cuda-12.4/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-12.4/lib64:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
export CUDNN_INCLUDE_DIR=/usr/include/
export CUDNN_LIB_DIR=/usr/lib/
export PATH=/usr/local/bin/bazel/bazelisk-linux-amd64:$PATH
export PATH=/usr/local/bin/bazel:$PATH
CUDNN_PATH=/home/tdillon/.local/lib/python3.9/site-packages/nvidia/cudnn
export LD_LIBRARY_PATH=$CUDNN_PATH/lib:$CONDA_PREFIX/lib/:$LD_LIBRARY_PATH
# export PYBIND11_DIR=/home/tdillon/.local/lib/python3.9/site-packages/pybind11
export PYBIND11_DIR=/home/tdillon/anaconda3/lib/python3.11/site-packages/pybind11
export PATH="/home/tdillon/Downloads/cmake-3.29.1-linux-x86_64/bin:$PATH"
export CMAKE_PREFIX_PATH=/home/tdillon/.local/lib/python3.9/site-packages/pybind11:$CMAKE_PREFIX_PATH
export Open3D_DIR="/home/tdillon/my_open3D/Open3D/build/CMakeFiles"
export Open3D_ROOT="/home/tdillon/my_open3D/Open3D"


#UNCOMMENT THIS IF YOU WANT TO USE CONDA ON BOOT (AND IN GENERAL?)
# >>> conda initialize >>>

# # !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/home/tdillon/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/home/tdillon/miniconda3/etc/profile.d/conda.sh" ]; then
#         . "/home/tdillon/miniconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/home/tdillon/miniconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup

# <<< conda initialize <<<

#the order is important here!
source /opt/ros/noetic/setup.bash

source ~/EM_tracker/devel/setup.bash
source ~/usb_workspace/devel/setup.bash
source ~/mapping/devel/setup.bash
source ~/EM_tracker/devel/setup.bash

# cd ~/usb_workspace

# # Configure the workspace to extend another one
# catkin config --extend ~/EM_tracker/devel

# catkin build

# cd ~/mapping

# # Configure the workspace to extend another one
# catkin config --extend ~/usb_workspace/devel

# catkin build




# Source the mapping workspace
# source ~/mapping/devel/setup.bash

# Manually append the ascension package to ROS_PACKAGE_PATH
# export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/EM_tracker/src/ascension

# export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/EM_tracker/src/ascension_ros
# export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/usb_workspace/src/usb_cam
# export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:~/mapping/src/mapping_ros

# source_ros_workspace ~/EM_tracker/EM_tracker/devel/setup.bash
# source_ros_workspace ~/usb_workspace/devel/setup.bash
# source_ros_workspace ~/mapping/devel/setup.bash



export CMAKE_PREFIX_PATH="/home/tdillon/my_open3D/Open3D:${CMAKE_PREFIX_PATH}"

# export PYENV_ROOT="$HOME/.pyenv"

# [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
# eval "$(pyenv init -)"

# source /opt/ros/noetic/setup.bash
alias python3='/usr/bin/python3.9'
alias python='/usr/bin/python3.9'
alias pip='python -m pip'
export ROS_PYTHON_VERSION=3
export PYTHON_VERSION=3.9
export PATH="/usr/bin/python3.9:$PATH"
# export PATH="$HOME/miniconda3/bin:$PATH"  # commented out by conda initialize

#for accessing helper functions
export PYTHONPATH="$HOME/segmentation/src:$PYTHONPATH"
export PYTHONPATH="$HOME/reconstruction/src:$PYTHONPATH"
export PYTHONPATH="$HOME/deformation/src:$PYTHONPATH"
export PYTHONPATH="$HOME/hardware_checks/src:$PYTHONPATH"
export PYTHONPATH="$HOME/FUNSR/src:$PYTHONPATH"
export PYTHONPATH="$HOME/FUNSR:$PYTHONPATH"


# source /home/tdillon/fiesta/fiesta_ws/devel/setup.bash

# for voronoi centerline extraction - simulate Slicer widget environment
# if [ -d "/home/tdillon/Slicer-5.6.2-linux-amd64" ]; then
export LD_LIBRARY_PATH="/home/tdillon/Slicer-5.6.2-linux-amd64/bin/../lib/Slicer-5.6:$LD_LIBRARY_PATH:/home/tdillon/Slicer-5.6.2-linux-amd64/slicer.org/Extensions-32448/SlicerVMTK/lib/Slicer-5.6/qt-loadable-modules"
# fi
# export LD_LIBRARY_PATH="/home/tdillon/Slicer-5.6.2-linux-amd64/bin/../lib/Slicer-5.6:$LD_LIBRARY_PATH:/home/tdillon/Slicer-5.6.2-linux-amd64/slicer.org/Extensions-32448/SlicerVMTK/lib/Slicer-5.6/qt-loadable-modules"
# export LD_LIBRARY_PATH="/home/tdillon/Slicer-5.6.2-linux-amd64/bin/../lib/Slicer-5.6:$LD_LIBRARY_PATH:/home/tdillon/Slicer-5.6.2-linux-amd64/slicer.org/Extensions-32448/SlicerVMTK/lib/Slicer-5.6/qt-loadable-modules"

export PYTHONPATH="$PYTHONPATH:/home/tdillon/Slicer-5.6.2-linux-amd64/bin/../lib/python3.9/site-packages:/home/tdillon/Slicer-5.6.2-linux-amd64/slicer.org/Extensions-32448/SlicerVMTK/lib/Slicer-5.6/qt-loadable-modules"

# export LD_PRELOAD=/home/tdillon/Slicer-5.6.2-linux-amd64/lib/Slicer-5.6/libtbb.so.12
# export LD_LIBRARY_PATH="/home/tdillon/Slicer-5.6.2-linux-amd64/bin/../lib/Slicer-5.6:$LD_LIBRARY_PATH"
# export LD_PRELOAD=/home/tdillon/Slicer-5.6.2-linux-amd64/bin/../lib/Slicer-5.6

